<style lang="less">
  .container {
    height: 100%;
  }
</style>

<script>
  import wepy from 'wepy';
  import 'wepy-async-function';

  import { setStore } from 'wepy-redux';
  import configStore from './store';

  const store = configStore();
  setStore(store);

  export default class extends wepy.app {
    config = {
      pages: ['pages/index', 'pages/home', 'pages/course', 'pages/out','pages/permission','pages/mine','pages/inputCheck'],
      window: {
        backgroundTextStyle: 'dark',
        // navigationStyle: 'custom',
        navigationBarBackgroundColor: '#fff',
        navigationBarTitleText: 'WeChat1',
        navigationBarTextStyle: 'black',
        enablePullDownRefresh: true
      },
       tabBar: {
        color: '#ccc',
        selectedColor: '#000',
        list: [

          {
            pagePath: 'pages/index',
            text: '首页',
            iconPath: './imgs/tab_home_nor@2x.png',
            selectedIconPath: './imgs/tab_home_sel@2x.png'
          },
          {
            pagePath: 'pages/course',
            text: '课程',
            iconPath: './imgs/tab_usedcar_nor@2x.png',
            selectedIconPath: './imgs/tab_usedcar_sel@2x.png'
          },
          {
            pagePath: 'pages/mine',
            text: '我的',
            iconPath: './imgs/tab_mine_nor@2x.png',
            selectedIconPath: './imgs/tab_mine_sel@2x.png'
          }
        ]
      },
      networkTimeout: {
        request: 10000,
        downloadFile: 10000
      },
      debug: true,
      usingComponents: {
        'van-button': '../components/vant/button/index'
      },
      "permission": {
        "scope.userLocation": {
          "desc": "你的位置信息将用于小程序位置接口的效果展示"
        },
      }
    };


    constructor() {
      super();
      this.use('requestfix');
      this.use('promisify');
      this.intercept('request', {
        // 发出请求时的回调函数
        config(p) {
          // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
          p.timestamp = +new Date();
          console.log('config request: ', p);
          // 必须返回OBJECT参数对象，否则无法发送请求到服务端
          return p;
        },

        // 请求成功后的回调函数
        success(p) {
          // 可以在这里对收到的响应数据对象进行加工处理
          console.log('request success: ', p);
          // 必须返回响应数据对象，否则后续无法对响应数据进行处理
          return p;
        },

        //请求失败后的回调函数
        fail(p) {
          console.log('request fail: ', p);
          // 必须返回响应数据对象，否则后续无法对响应数据进行处理
          return p;
        },

        // 请求完成时的回调函数(请求成功或失败都会被执行)
        complete(p) {
          console.log('request complete: ', p);
        }
      });
    }

    globalData = {
      userInfo: null,
      ret: null,
      config: null,
      apiUrl: '后台地址'
    };
    onLaunch() {
      this.testAsync();
      this.checkSettingStatus();
    }
    // 初始化获取config
    init() {
      wepy.request('初始化后台api').then(
        (ret) => {
          this.globalData.config = ret.data.config;
          console.log('======初始化成功=======');
          //初始化成功判断是否授权
          this.checkSettingStatus();
        }
      )
    }
    //判断登录状态/是否授权
    async checkSettingStatus() {
      try {
        let auth = await wepy.getSetting();    //调用getSetting Api
        let authSetting = auth.authSetting;    //获取authSetting用来判断是否授权
        console.log('---开始判断---', authSetting['scope.userInfo']);
        if (authSetting['scope.userInfo']) {
          console.log('---已经授权---');
          //已经授权情况下直接获取userInfor
          let userInfo = await wepy.getUserInfo();
          this.globalData.ret = userInfo;
          //调用登录
          this.login();
        } else {
          //如果没有授权跳转至授权页进行授权(新版只能通过调用按钮来调出授权框)
          //授权页面button需要赋予open-type='getUserInfo'属性
          //bindgetuserinfo='scope' bind方法用来授权/获取userInfor
          console.log('---用户未授权---');
          wx.reLaunch({
            url: '/pages/permission',
          })
        }
      } catch (error) {
        console.log(error)
      }
    }
    //登录方法
    async login() {
      try {
        console.log('---调用login方法---')
        let token = wepy.getStorageSync('token') || '';
        let { code: code } = await wepy.login();  //通过调用login获取code 判断是否开始登录
        console.log('code',code)
        if (code) {
          console.log('---获取信息发送网络请求---');
          let ret = this.globalData.ret
          wepy.request({
            url: '', //开发者服务器接口地址",
            data: {
              code: code,
              rawData: ret.rawData,
              token: token
            },
            method: 'POST',
            header: {
              'Content-Type': 'application/x-www-form-urlencoded'
            }
          }).then((res) => {
            console.log('---网络请求返回成功---')
            console.log(res)
            let response = res.data;
            if (response.code == 1) {
              console.log('---登录正常，返回值1---');
              console.log(response);
              this.globalData.userInfo = response.data.userInfo;
              wepy.setStorageSync('token', response.data.userInfo.token);
              console.log(this.globalData.userInfo);
            } else {
              console.log('---登录异常---');
              wepy.setStorageSync('token', '');
            }
          });
        } else {
          console.log('---login返回异常---')
        }
      } catch (error) {
        console.log(error)
      }

    }
    onPageNotFound(res) {
      wx.redirectTo({
        url: 'pages/err'
      }); // 如果是 tabbar 页面，请使用 wx.switchTab
    }

    sleep(s) {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve('promise resolved');
        }, s * 1000);
      });
    }

    async testAsync() {
      const data = await this.sleep(3);
      console.log(data);
    }

    async getUserInfo() {
      if (this.globalData.userInfo) {
        return this.globalData.userInfo;
      }
      await wepy.login();
      let res = await wepy.getUserInfo();
      this.globalData.userInfo = res.userInfo;
      return res.userInfo;
    }
  }
</script>
